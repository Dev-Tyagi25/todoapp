{"version":3,"sources":["Components/TodoItem.js","Components/AddNewItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","checked","onChange","onclick","description","AddNewItem","htmlFor","name","id","value","onchange","onClick","onsubmit","remove","App","state","task","completed","newItem","checkItem","des","newTask","map","data","setState","removeCompleted","i","length","push","handleChange","event","target","addItem","newList","unshift","TodoList","this","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAceA,MAXf,SAAkBC,GAEd,OACI,yBAAKC,UAAU,YACX,2BAAOC,KAAK,WAAWC,QAASH,EAAMG,QAASC,SAAUJ,EAAMK,UAC/D,uBAAGJ,UAAWD,EAAMG,QAAU,YAAc,MAAOH,EAAMM,aACzD,+B,MCMGC,MAZf,SAAoBP,GAChB,OACI,yBAAKC,UAAU,cACX,2BAAOO,QAAQ,WAAf,iBACA,2BAAON,KAAK,OAAOO,KAAK,UAAUC,GAAG,UAAUC,MAAOX,EAAMM,YAAaF,SAAUJ,EAAMY,WACzF,4BAAQC,QAASb,EAAMc,SAAUb,UAAU,aAA3C,OACA,4BAAQY,QAASb,EAAMe,OAAQd,UAAU,gBAAzC,UACA,+BCkFGe,G,kNArFbC,MAAM,CACJC,KAAM,CAAC,CAACC,WAAW,EAAOb,YAAa,SACvC,CAACa,WAAW,EAAOb,YAAa,SAChC,CAACa,WAAW,EAAOb,YAAa,UAElCc,QAAS,I,EAGTC,UAAY,SAACC,GASX,IAAMC,EAAU,EAAKN,MAAMC,KAAKM,KAAI,SAAAC,GAIlC,OAHGA,EAAKnB,cAAgBgB,IACtBG,EAAKN,WAAaM,EAAKN,WAElBM,KAMT,EAAKC,SAAS,CACZR,KAAMK,K,EAKVI,gBAAkB,WAEhB,IADA,IAAMJ,EAAU,GACRK,EAAE,EAAEA,EAAE,EAAKX,MAAMC,KAAKW,OAAOD,KACC,IAAjC,EAAKX,MAAMC,KAAKU,GAAGT,WACpBI,EAAQO,KAAK,EAAKb,MAAMC,KAAKU,IAIjC,EAAKF,SAAS,CACZR,KAAMK,K,EAIVQ,aAAe,SAACC,GACd,EAAKN,SAAS,CACZN,QAASY,EAAMC,OAAOtB,S,EAI1BuB,QAAU,WACR,GAA0B,KAAvB,EAAKjB,MAAMG,QAAe,CAC3B,IAAMG,EAAU,CACdJ,WAAW,EACXb,YAAa,EAAKW,MAAMG,SAEpBe,EAAO,YAAO,EAAKlB,MAAMC,MAC/BiB,EAAQC,QAAQb,GAChB,EAAKG,SAAS,CACZR,KAAMiB,M,uDAKF,IAAD,OACDE,EAAWC,KAAKrB,MAAMC,KAAKM,KAAI,SAACC,EAAKc,GACzC,OAAO,kBAAC,EAAD,CACPpC,QAASsB,EAAKN,UACdb,YAAamB,EAAKnB,YAClBD,QAAS,WAAO,EAAKgB,UAAUI,EAAKnB,cACpCkC,IAAKD,OAGP,OACE,yBAAKtC,UAAU,QACb,yCACA,kBAAC,EAAD,CAAYa,SAAUwB,KAAKJ,QAAStB,SAAU0B,KAAKP,aAAczB,YAAagC,KAAKrB,MAAMG,QAASL,OAAQuB,KAAKX,kBAC9GU,O,GAjFSI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7ac7d3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./TodoItem.css\";\r\n\r\nfunction TodoItem(props) {\r\n\r\n    return(\r\n        <div className=\"todoItem\" >\r\n            <input type=\"checkbox\" checked={props.checked} onChange={props.onclick}></input>\r\n            <p className={props.checked ? \"completed\" : null}>{props.description}</p>\r\n            <hr />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport \"./AddNewItem.css\"\r\n\r\nfunction AddNewItem(props) {\r\n    return(\r\n        <div className=\"addNewItem\"> \r\n            <label htmlFor=\"newItem\">Description: </label>\r\n            <input type=\"text\" name=\"newItem\" id=\"newItem\" value={props.description} onChange={props.onchange}></input>\r\n            <button onClick={props.onsubmit} className=\"addButton\">Add</button>\r\n            <button onClick={props.remove} className=\"removeButton\">Remove</button>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewItem;","import React, { Component } from 'react';\nimport TodoItem from './Components/TodoItem';\nimport AddNewItem from './Components/AddNewItem';\nimport './App.css';\n\nclass App extends Component {\n\n  state={\n    task: [{completed: false ,description: \"Task1\"},\n    {completed: false ,description: \"Task2\"},\n    {completed: false ,description: \"Task3\"}\n  ],\n  newItem: \"\"\n  }\n  \n  checkItem = (des) => {\n    // let pos=0;\n    // for(let i=0;i<this.state.task.length;i++)\n    // {\n    //   if(des === this.state.task[i].description)\n    //   { pos=i;\n    //     break;\n    //   }\n    // }\n    const newTask = this.state.task.map(data => {\n      if(data.description === des){\n        data.completed = !data.completed;\n      }\n      return data;\n    })\n    // console.log(pos);\n    // const  isChecked = !this.state.task[pos].completed;\n    // const newTask = [...this.state.task];\n    // newTask[pos].completed = isChecked;\n    this.setState({\n      task: newTask\n    });\n    // console.log(isChecked);    \n  }\n\n  removeCompleted = () => {\n    const newTask = [];\n    for(let i=0;i<this.state.task.length;i++){\n      if(this.state.task[i].completed !== true){\n        newTask.push(this.state.task[i]);\n      }\n    }\n    \n    this.setState({\n      task: newTask\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      newItem: event.target.value\n    })\n  }\n\n  addItem = () => {\n    if(this.state.newItem !== \"\"){\n      const newTask = {\n        completed: false,\n        description: this.state.newItem\n      }\n      const newList = [...this.state.task];\n      newList.unshift(newTask);\n      this.setState({\n        task: newList\n      })\n    }\n  }\n\n  render() {\n    const TodoList = this.state.task.map((data,index) => {\n      return <TodoItem \n      checked={data.completed} \n      description={data.description} \n      onclick={() => {this.checkItem(data.description)}} \n      key={index}/>\n    })\n\n    return (\n      <div className=\"main\">\n        <h2>Todo List</h2>\n        <AddNewItem onsubmit={this.addItem} onchange={this.handleChange} description={this.state.newItem} remove={this.removeCompleted}/>\n        {TodoList}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}